A Clojure AWS library that provides

  - Authentication using various Credential Providers
  - Authentication using MFA, optionally
  - Assume Roles https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html

* Installation

#+BEGIN_SRC clojure

;; Add below to deps.edn

{omnyway-labs/saw
  {:git/url "https://github.com/omnyway-labs/saw.git"
   :sha "3ac408b6c7f7574c3280d99959a3b542ecc4d7f2"
   :tag "0.2.13"}

;; or
{saw {:mvn/version "0.2.13"}}

#+END_SRC

#+BEGIN_SRC clojure
(require '[saw.core :as saw])

;; use any of the following
(saw/login provider)
(saw/login provider mfa-code)
(saw/login provider mfa-code mfa-role)
#+END_SRC

See following examples for usage

* Usage

** Basic Login with just Credential Providers
/Credential Providers/ specify how to get the AWS credentials to enable access to AWS CLI or SDK resources

*Note that /Credential Providers/ are a map of key/value pairs.*.
Examples below may show it as ~provider~ but its always going to be a ~map~ and have at lease one key-pair

Basic Generic form without MFA:
#+BEGIN_SRC clojure
(saw/login provider)
#+END_SRC

*** ~:static~
Expects explicit access-key and secret-key for credentials
#+BEGIN_SRC clojure
(saw/login {:provider :static
            :region "us-east-1"
            :access-key "xxx"
            :secret-key "xxx"})
#+END_SRC

*** ~:profile~
Expects a profile that matches in ~~/.aws/credentials~ and uses those to login.

*Note that this profile should be one with actual credentials, not an STS Assume Role credential.*

#+BEGIN_SRC clojure
(saw/login {:provider :profile
            :profile :default
            :region "us-east-1"})
#+END_SRC
*** ~:env~
Will get the explicit credentials from environment variables.
Make sure the env vars ~AWS_ACCESS_KEY~ and ~AWS_SECRET_KEY_ID~ are set when using ~:env~
#+BEGIN_SRC clojure
(saw/login {:provider :env
            :region "us-east-1"})
#+END_SRC
*** :default
*TODO: what is this?*

#+BEGIN_SRC clojure
(saw/login {:provider :default
            :region "us-east-1"})
#+END_SRC

** Login with Credential Provider and MFA

There are two optional arguments that /are not part of the map and are not a map themselves/
- mfa-code: The One Time Password code from your authenticator
- mfa-arn: The AWS ARN of your authenticator

#+BEGIN_SRC clojure
(saw/login provider mfa-code mfa-arn)

;; or set the AWS_MFA_ARN in an env variable
export AWS_MFA_ARN=arn:aws:iam::xxx:mfa/icy
(saw/login provider mfa-code)

#+END_SRC

When MFA is used to create a session, the same session can be used to
assume multiple Roles. The session is persisted in =~/.aws/session= file

*** Full example of an incline login with a profile provider and an MFA code/arn:
#+BEGIN_SRC clojure
(saw/login {:provider :profile :profile :production :region "us-east-1"} "096297" "arn:aws:iam::9536952499298:mfa/george")
#+END_SRC

** Assume Role

With the above Login CredentialsProvider object, created using with or
without MFA, it is possible to assume a different relevant IAM role

#+BEGIN_SRC clojure
(-> (saw/login provider)
    (saw/assume profile))

;;example:

(-> (saw/login {:provider :profile :profile :default :region "us-east-1"})
    (saw/assume profile))

#+END_SRC

where profile is an entry in =~/.aws/credentials= file

#+BEGIN_SRC conf

[default]
aws_access_key_id=xxx
aws_secret_access_key=xxx
region=us-east-1
[staging]
role_arn=arn:aws:iam::xxx:role/StagingUserRole
region=us-east-1
source_profile=default
[prod]
role_arn=arn:aws:iam::xxx:role/ProdUserRole
region=us-east-1
source_profile=default
#+END_SRC

Assume Role works with MFA too:

#+BEGIN_SRC clojure
(-> (saw/login provider mfa-code)
    (saw/assume :staging))

;; or just assume after a login
(saw/assume :staging)
(saw/assume :production)
#+END_SRC

We can also pass in the role-arn and region without needing it to be
in a profile in ~/.aws/credentials

#+BEGIN_SRC clojure
(-> (saw/login provider)
    (saw/assume "arn:aws:iam::xxx:role/StagingUserRole" "us-east-1"))

;;=> creds
#+END_SRC

** Using with an AWS service client

=login= returns the CredentialsProvider object that can be used to
create the AWS service clients. Example:

#+BEGIN_SRC clojure

(import '[com.amazonaws.services.s3
          AmazonS3ClientBuilder])

(let [creds (saw/login provider)
      client (-> (AmazonS3ClientBuilder/standard)
                 (.withCredentials creds)
                 (.withRegion (saw/region))
                 .build)])

;; or when using assume

(let [creds (-> (saw/login provider) (saw/assume profile)]
      (-> (AmazonS3ClientBuilder/standard)
          (.withCredentials creds)
          (.withRegion (saw/region))
          .build)

#+END_SRC

=(.withCredentials (saw/creds))= works too.

=(saw/region)= returns the current region set during =login= or =assume=

** Errors

=ex-data= throws error in the format

#+BEGIN_SRC clojure
(ex-data *e)

{:error error-id :message error-message :type :saw-error :cause cause}
#+END_SRC

Following are some known error-ids:

#+BEGIN_SRC clojure
(:assume-role-failed
 :invalid-creds-object
 :mfa-code-not-string
 :profile-not-found
 :provider-not-resolved
 :provider-not-supported
 :region-not-found
 :region-not-found-in-profile
 :role-arn-not-found
 :role-arn-not-found-in-profile
 :session-cache-failed
 :session-create-failed
 :session-empty-cache-failed
 :session-lookup-failed
 :session-not-found
 :session-validaton-failed)
#+END_SRC

** Session Utils

#+BEGIN_SRC clojure
;; to lookup session
(saw/session)

;; to validate the session
(saw/validate-session region)
(saw/validate-session "us-east-1")
#+END_SRC

The Session Timeout is configurable via the AWS_SESSION_TIMEOUT env
variable (seconds).

* License - Apache 2.0

Copyright 2020 Omnyway Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

[[http://www.apache.org/licenses/LICENSE-2.0]]

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
